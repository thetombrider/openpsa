"""add_custom_roles_and_teams

Revision ID: 7b1c762d58a8
Revises: 35fb47a6aad3
Create Date: 2025-02-19 23:04:10.977474

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7b1c762d58a8'
down_revision: Union[str, None] = '35fb47a6aad3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # 1. Rimuoviamo il cambio di tipo automatico da op.alter_column
    op.execute("CREATE TYPE consultantroleenum AS ENUM ('JUNIOR', 'MID', 'SENIOR', 'MASTER', 'PRINCIPAL')")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('consultant_roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('cost_rates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('rate', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('currency', sa.String(), nullable=True),
    sa.Column('valid_from', sa.Date(), nullable=False),
    sa.Column('valid_to', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teams',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team_members',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.Column('join_date', sa.Date(), nullable=False),
    sa.Column('leave_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['consultant_roles.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_billing_rates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('billing_rate_id', sa.Integer(), nullable=False),
    sa.Column('valid_from', sa.Date(), nullable=False),
    sa.Column('valid_to', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['billing_rate_id'], ['billing_rates.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_cost_rates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('cost_rate_id', sa.Integer(), nullable=False),
    sa.Column('valid_from', sa.Date(), nullable=False),
    sa.Column('valid_to', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['cost_rate_id'], ['cost_rates.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('billing_rates', sa.Column('name', sa.String(), nullable=False))
    op.add_column('billing_rates', sa.Column('description', sa.String(), nullable=True))
    op.add_column('billing_rates', sa.Column('currency', sa.String(), nullable=True))
    op.add_column('billing_rates', sa.Column('valid_from', sa.Date(), nullable=False))
    op.add_column('billing_rates', sa.Column('valid_to', sa.Date(), nullable=True))
    op.add_column('billing_rates', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.drop_constraint('billing_rates_project_id_fkey', 'billing_rates', type_='foreignkey')
    op.drop_constraint('billing_rates_user_id_fkey', 'billing_rates', type_='foreignkey')
    op.drop_column('billing_rates', 'user_id')
    op.drop_column('billing_rates', 'start_date')
    op.drop_column('billing_rates', 'end_date')
    op.drop_column('billing_rates', 'project_id')
    op.alter_column('invoice_line_items', 'invoice_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('invoice_line_items', 'description',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('invoice_line_items', 'quantity',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=10, scale=2),
               nullable=True)
    op.alter_column('invoice_line_items', 'rate',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=True)
    op.add_column('projects', sa.Column('team_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'projects', 'teams', ['team_id'], ['id'])
    op.drop_column('users', 'hourly_rate')
    # ### end Alembic commands ###

    # 2. Converti le colonne role usando un USING esplicito
    op.execute("""
        ALTER TABLE project_users 
        ALTER COLUMN role TYPE consultantroleenum 
        USING (role::text)::consultantroleenum
    """)
    
    op.execute("""
        ALTER TABLE resource_allocations 
        ALTER COLUMN role TYPE consultantroleenum 
        USING (role::text)::consultantroleenum
    """)

    # 3. Crea una colonna temporanea per il role_id
    op.add_column('project_users', 
        sa.Column('role_id', sa.Integer(), nullable=True))
    op.add_column('resource_allocations', 
        sa.Column('role_id', sa.Integer(), nullable=True))

    # 4. Inserisci i ruoli di base nella nuova tabella
    op.execute("""
        INSERT INTO consultant_roles (id, name, description) VALUES
        (1, 'JUNIOR', 'Junior Consultant'),
        (2, 'MID', 'Mid Level Consultant'),
        (3, 'SENIOR', 'Senior Consultant'),
        (4, 'MASTER', 'Master Consultant'),
        (5, 'PRINCIPAL', 'Principal Consultant')
    """)

    # 5. Mappa i vecchi valori enum ai nuovi ID
    op.execute("""
        UPDATE project_users pu
        SET role_id = (
            SELECT id FROM consultant_roles cr 
            WHERE cr.name = pu.role::text
        )
    """)
    
    op.execute("""
        UPDATE resource_allocations ra
        SET role_id = (
            SELECT id FROM consultant_roles cr 
            WHERE cr.name = ra.role::text
        )
    """)

    # 6. Rimuovi le vecchie colonne enum e rinomina le nuove
    op.drop_column('project_users', 'role')
    op.drop_column('resource_allocations', 'role')
    op.alter_column('project_users', 'role_id', new_column_name='role')
    op.alter_column('resource_allocations', 'role_id', new_column_name='role')

    # 7. Aggiungi le foreign key
    op.create_foreign_key(
        'fk_project_users_role',
        'project_users', 'consultant_roles',
        ['role'], ['id']
    )
    op.create_foreign_key(
        'fk_resource_allocations_role',
        'resource_allocations', 'consultant_roles',
        ['role'], ['id']
    )


def downgrade() -> None:
    # 1. Rimuovi le foreign key
    op.drop_constraint('fk_project_users_role', 'project_users', type_='foreignkey')
    op.drop_constraint('fk_resource_allocations_role', 'resource_allocations', type_='foreignkey')

    # 2. Aggiungi colonne temporanee per il tipo enum
    op.add_column('project_users', sa.Column('role_enum', postgresql.ENUM('JUNIOR', 'MID', 'SENIOR', 'MASTER', 'PRINCIPAL', name='consultantrole'), nullable=True))
    op.add_column('resource_allocations', sa.Column('role_enum', postgresql.ENUM('JUNIOR', 'MID', 'SENIOR', 'MASTER', 'PRINCIPAL', name='consultantrole'), nullable=True))

    # 3. Copia i valori dai role_id alle colonne enum
    op.execute("""
        UPDATE project_users pu
        SET role_enum = (
            SELECT name::consultantrole FROM consultant_roles cr 
            WHERE cr.id = pu.role
        )
    """)
    
    op.execute("""
        UPDATE resource_allocations ra
        SET role_enum = (
            SELECT name::consultantrole FROM consultant_roles cr 
            WHERE cr.id = ra.role
        )
    """)

    # 4. Rimuovi le vecchie colonne e rinomina le nuove
    op.drop_column('project_users', 'role')
    op.drop_column('resource_allocations', 'role')
    op.alter_column('project_users', 'role_enum', new_column_name='role')
    op.alter_column('resource_allocations', 'role_enum', new_column_name='role')

    # Ripristiniamo il tipo originale
    op.execute("ALTER TABLE project_users ALTER COLUMN role TYPE consultantrole USING role::text::consultantrole")
    op.execute("ALTER TABLE resource_allocations ALTER COLUMN role TYPE consultantrole USING role::text::consultantrole")

    # Rimuoviamo il nuovo tipo enum
    op.execute("DROP TYPE consultantroleenum")

    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('hourly_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.alter_column('resource_allocations', 'role',
               existing_type=sa.Enum('JUNIOR', 'MID', 'SENIOR', 'MASTER', 'PRINCIPAL', name='consultantroleenum'),
               type_=postgresql.ENUM('JUNIOR', 'MID', 'SENIOR', 'MASTER', 'PRINCIPAL', name='consultantrole'),
               existing_nullable=True)
    op.drop_constraint(None, 'projects', type_='foreignkey')
    op.drop_column('projects', 'team_id')
    op.alter_column('project_users', 'role',
               existing_type=sa.Enum('JUNIOR', 'MID', 'SENIOR', 'MASTER', 'PRINCIPAL', name='consultantroleenum'),
               type_=postgresql.ENUM('JUNIOR', 'MID', 'SENIOR', 'MASTER', 'PRINCIPAL', name='consultantrole'),
               existing_nullable=True)
    op.alter_column('invoice_line_items', 'rate',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=False)
    op.alter_column('invoice_line_items', 'quantity',
               existing_type=sa.Numeric(precision=10, scale=2),
               type_=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('invoice_line_items', 'description',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('invoice_line_items', 'invoice_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.add_column('billing_rates', sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('billing_rates', sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('billing_rates', sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=False))
    op.add_column('billing_rates', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('billing_rates_user_id_fkey', 'billing_rates', 'users', ['user_id'], ['id'])
    op.create_foreign_key('billing_rates_project_id_fkey', 'billing_rates', 'projects', ['project_id'], ['id'])
    op.drop_column('billing_rates', 'created_at')
    op.drop_column('billing_rates', 'valid_to')
    op.drop_column('billing_rates', 'valid_from')
    op.drop_column('billing_rates', 'currency')
    op.drop_column('billing_rates', 'description')
    op.drop_column('billing_rates', 'name')
    op.drop_table('user_cost_rates')
    op.drop_table('user_billing_rates')
    op.drop_table('team_members')
    op.drop_table('teams')
    op.drop_table('cost_rates')
    op.drop_table('consultant_roles')
    # ### end Alembic commands ###
