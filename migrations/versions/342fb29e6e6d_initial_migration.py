"""Initial migration

Revision ID: 342fb29e6e6d
Revises: 
Create Date: 2025-02-16 23:53:10.128386

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import ENUM


# revision identifiers, used by Alembic.
revision: str = '342fb29e6e6d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Elimina l'enum esistente se esiste
    op.execute("DROP TYPE IF EXISTS userrole CASCADE")
    op.execute("DROP TYPE IF EXISTS projectstatus CASCADE")
    op.execute("DROP TYPE IF EXISTS resourceallocationstatus CASCADE")
    
    # Crea gli enum con i valori ESATTAMENTE come definiti nelle classi Enum
    userrole = sa.Enum("ADMIN", "MANAGER", "CONSULTANT", name='userrole', create_type=False)
    projectstatus = sa.Enum("DRAFT", "ACTIVE", "COMPLETED", "CANCELLED", name='projectstatus', create_type=False)
    resourceallocationstatus = sa.Enum("PLANNED", "ACTIVE", "COMPLETED", name='resourceallocationstatus', create_type=False)
    billingtype = sa.Enum("TIME_AND_MATERIALS", "FIXED_PRICE", name='billingtype', create_type=False)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clients',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('contact_email', sa.String(), nullable=True),
        sa.Column('contact_phone', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('role', userrole, nullable=False),
        sa.Column('hourly_rate', sa.Float(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email')
    )
    op.create_table('projects',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('client_id', sa.Integer(), nullable=True),
        sa.Column('start_date', sa.DateTime(), nullable=True),
        sa.Column('end_date', sa.DateTime(), nullable=True),
        sa.Column('budget', sa.Float(), nullable=True),
        sa.Column('status', projectstatus, nullable=False),
        sa.Column('billing_type', billingtype, nullable=True),
        sa.Column('billing_currency', sa.String(), nullable=True),
        sa.Column('billing_notes', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['client_id'], ['clients.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('billing_rates',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('project_id', sa.Integer(), nullable=True),
        sa.Column('rate', sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column('start_date', sa.Date(), nullable=False),
        sa.Column('end_date', sa.Date(), nullable=True),
        sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('invoices',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('project_id', sa.Integer(), nullable=False),
        sa.Column('invoice_number', sa.String(), nullable=False),
        sa.Column('date', sa.Date(), nullable=False),
        sa.Column('due_date', sa.Date(), nullable=False),
        sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column('paid', sa.Boolean(), nullable=True),
        sa.Column('paid_date', sa.Date(), nullable=True),
        sa.Column('notes', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('invoice_number')
    )
    op.create_table('project_users',
        sa.Column('project_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('role', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('project_id', 'user_id')
    )
    op.create_table('resource_allocations',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('project_id', sa.Integer(), nullable=False),
        sa.Column('start_date', sa.Date(), nullable=False),
        sa.Column('end_date', sa.Date(), nullable=False),
        sa.Column('allocation_percentage', sa.Float(), nullable=False),
        sa.Column('status', resourceallocationstatus, nullable=False),
        sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
        sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('time_entries',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('project_id', sa.Integer(), nullable=True),
        sa.Column('date', sa.DateTime(), nullable=False),
        sa.Column('hours', sa.Float(), nullable=False),
        sa.Column('description', sa.String(), nullable=True),
        sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_time_entries_date', 'time_entries', ['date'], unique=False)
    op.create_index('idx_time_entries_user_date', 'time_entries', ['user_id', 'date'], unique=False)
    op.create_table('invoice_line_items',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('invoice_id', sa.Integer(), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('quantity', sa.Float(), nullable=False),
        sa.Column('rate', sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=True),
        sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('line_item_time_entries',
        sa.Column('line_item_id', sa.Integer(), nullable=False),
        sa.Column('time_entry_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['line_item_id'], ['invoice_line_items.id'], ),
        sa.ForeignKeyConstraint(['time_entry_id'], ['time_entries.id'], ),
        sa.PrimaryKeyConstraint('line_item_id', 'time_entry_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('line_item_time_entries')
    op.drop_table('invoice_line_items')
    op.drop_index('idx_time_entries_user_date', table_name='time_entries')
    op.drop_index('idx_time_entries_date', table_name='time_entries')
    op.drop_table('time_entries')
    op.drop_table('resource_allocations')
    op.drop_table('project_users')
    op.drop_table('invoices')
    op.drop_table('billing_rates')
    op.drop_table('projects')
    op.drop_table('users')
    op.drop_table('clients')
    # ### end Alembic commands ###
    
    # Elimina l'enum
    op.execute("DROP TYPE IF EXISTS userrole CASCADE")
